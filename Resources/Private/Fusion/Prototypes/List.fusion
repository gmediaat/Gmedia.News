# News list
prototype(Gmedia.News:List) {
	# default templatePath is below which is set automatically by Neos.
	# to change template override templatePath
	# templatePath = 'resource://Gmedia.News/Private/Templates/NodeTypes/List.html'

	# newsFolder is read from current node's newsFolder property if exists
	# otherwise the closest Folder node is selected
	@override.newsFolderNode = ${q(node).property('newsFolder') != null ? q(node).property('newsFolder') : q(node).closest('[instanceof Gmedia.News:Folder]')}

	# configuration merged from Settings and from the node properties.
	# this way configuration can be changed globally for all sites in Settings.yaml OR
	# change configuration in your Site package's TypoScript by overriding the values OR
	# if you set a new value for the configuration in the node property then it is only available
	# for particular view. in this case if you do any change in Settings or TypoScript level
	# then it will still take the configuration value from the node properties.
	@override.configuration = ${Configuration.setting('Gmedia.News.view.list')}
	@override.configuration.@process.mergeConfiguration = ${NewsConfiguration.mergeWithNodeProperties(value, node)}
	configuration = ${configuration}

	# TODO - remove the condition if Content
	#newsCollection = ${q(node).is('[instanceof Neos.Neos:Content]') ? q(newsFolderNode).children('[instanceof Gmedia.News:News]').get() : newsFolderNode.children('[instanceof Gmedia.News:News]').get()}
	newsCollection = ${q(newsFolderNode).children('[instanceof Gmedia.News:News]').get()}

	# Filter and sorting
	#@override.filterByCategories = ${q(node).is('[instanceof Gmedia.News:List]') ? q(node).property_array('filterByCategories') != null ? Array.join(q(node).property_array('filterByCategories')) : '' : ''}
	@override.filterByTag = ${request.arguments.tag}
	@override.filterByYear = ${request.arguments.year}
	@override.filterByMonth = ${request.arguments.month}

	# 1. filter the news collection by one or many categories if applicable
	# this internally uses the extended filter() operation
	newsCollection.@process.filterByCategories = ${filterByCategories != null && filterByCategories != '' ? q(value).filter('[categories *= \'' + filterByCategories + '\']').get() : value}

	# 2. filter the news collection by given year if applicable
	newsCollection.@process.filterByYear = ${filterByYear != null && filterByMonth == null ? q(value).filter('[dateTime = \'' + filterByYear + '\']', 'Y').get() : value}

	# 3. filter the news collection by given year and month if applicable
	newsCollection.@process.filterByYearAndMonth = ${filterByYear != null && filterByMonth != null ? q(value).filter('[dateTime = \'' + filterByYear + '/' + filterByMonth + '\']', 'Y/m').get() : value}

	# 4. filter the news collection by a tag if applicable
	newsCollection.@process.filterByTag = ${filterByTag != null ? q(value).filter('[tags *= ' + filterByTag + ']').get() : value}

	# sort nodes
    newsCollection.@process.sort = ${q(value).count() > 0 ? q(value).sort(configuration.sortProperty, configuration.sortOrder).get() : value}

	# this renders a single item inside the list
	newsItem = Gmedia.News:News
	newsItem {
		templatePath = 'resource://Gmedia.News/Private/Templates/FusionObjects/ListItem.html'
	}

	# uncached the list view
	@cache {
		mode = 'uncached'
		context {
			1 = 'node'
			2 = 'documentNode'
		}
	}
}